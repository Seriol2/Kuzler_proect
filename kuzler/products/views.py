import os
from django.http import FileResponse, HttpResponseBadRequest, HttpResponse
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework import generics

from .models import Product, NFCTag
from .serializers import ProductSerializer
from .utils import generate_and_save_audio


# üéß –ê—É–¥–∏–æ –ø–æ UID –º–µ—Ç–∫–µ
@api_view(['GET'])
@permission_classes([AllowAny])
def play_audio(request):
    nfc_uid = request.GET.get('id')

    if not nfc_uid:
        return HttpResponseBadRequest("Missing 'id' parameter")

    try:
        tag = NFCTag.objects.get(uid=nfc_uid)
        product = tag.product

        if not product.audio_file:
            return HttpResponse("Audio file not found", status=404)

        audio_path = product.audio_file.path
        if not os.path.exists(audio_path):
            return HttpResponse("Audio file missing", status=404)

        return FileResponse(open(audio_path, 'rb'), content_type='audio/mpeg')

    except NFCTag.DoesNotExist:
        return HttpResponse("NFCTag not found", status=404)


# üì¶ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ UID NFC
@api_view(['GET'])
@permission_classes([AllowAny])
def get_product_by_nfc(request, uid):
    try:
        tag = NFCTag.objects.get(uid=uid)
        product = tag.product
        data = {
            'nfc_uid': tag.uid,
            'name': product.name,
            'price': str(product.price),
        }
        return Response(data)
    except NFCTag.DoesNotExist:
        return Response({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)


# üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ / —Å–æ–∑–¥–∞–Ω–∏–µ
class ProductListCreateView(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [AllowAny]

    def perform_create(self, serializer):
        product = serializer.save()
        print(f"[DEBUG] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.name}, ID: {product.id}")


# üîç –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
class ProductDetailView(generics.RetrieveAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [AllowAny]


# üìé –ü—Ä–∏–≤—è–∑–∫–∞ NFC –∫ —Ç–æ–≤–∞—Ä—É
@api_view(['POST'])
@permission_classes([AllowAny])
def NFCAssignView(request):
    uid = request.data.get('uid')
    product_id = request.data.get('product_id')

    if not uid or not product_id:
        return Response({'error': 'UID –∏ product_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}, status=400)

    try:
        product = Product.objects.get(pk=product_id)
        tag, created = NFCTag.objects.update_or_create(
            uid=uid,
            defaults={'product': product}
        )
        return Response({'status': 'assigned', 'product': product.name})
    except Product.DoesNotExist:
        return Response({'error': '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)


# üó£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@api_view(['POST'])
@permission_classes([AllowAny])
def generate_audio_for_product(request):
    product_id = request.data.get('product_id')
    if not product_id:
        return Response({'error': 'product_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}, status=400)

    try:
        generate_and_save_audio(product_id)
        return Response({'status': '–ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ'})
    except Exception as e:
        return Response({'error': str(e)}, status=500)
# views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser

class UploadAudio(APIView):
    parser_classes = [MultiPartParser]

    def post(self, request):
        file = request.FILES.get("file")
        if file:
            with open(f"media/{file.name}", "wb+") as dest:
                for chunk in file.chunks():
                    dest.write(chunk)
            return Response({"status": "success"})
        return Response({"error": "no file"}, status=400)
from django.shortcuts import get_object_or_404

@api_view(['GET'])
@permission_classes([AllowAny])
def download_audio_by_product_id(request, id):
    product = get_object_or_404(Product, pk=id)

    if not product.audio_file:
        return Response({'error': '–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞'}, status=404)

    audio_path = product.audio_file.path
    if not os.path.exists(audio_path):
        return Response({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'}, status=404)

    return FileResponse(open(audio_path, 'rb'), content_type='audio/mpeg')
